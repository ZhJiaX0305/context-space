// Code generated by mockery v2.53.4. DO NOT EDIT.

package provideradapter_mocks

import (
	context "context"

	language "golang.org/x/text/language"

	mock "github.com/stretchr/testify/mock"

	provider "github.com/context-space/context-space/backend/internal/shared/contract/providercore"
)

// MockProvidercoreAcl is an autogenerated mock type for the ProvidercoreAcl type
type MockProvidercoreAcl struct {
	mock.Mock
}

type MockProvidercoreAcl_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvidercoreAcl) EXPECT() *MockProvidercoreAcl_Expecter {
	return &MockProvidercoreAcl_Expecter{mock: &_m.Mock}
}

// GetProvidercoreData provides a mock function with given fields: ctx, identifier, preferredLang
func (_m *MockProvidercoreAcl) GetProvidercoreData(ctx context.Context, identifier string, preferredLang language.Tag) (*provider.ProviderDTO, error) {
	ret := _m.Called(ctx, identifier, preferredLang)

	if len(ret) == 0 {
		panic("no return value specified for GetProvidercoreData")
	}

	var r0 *provider.ProviderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, language.Tag) (*provider.ProviderDTO, error)); ok {
		return rf(ctx, identifier, preferredLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, language.Tag) *provider.ProviderDTO); ok {
		r0 = rf(ctx, identifier, preferredLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.ProviderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, language.Tag) error); ok {
		r1 = rf(ctx, identifier, preferredLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidercoreAcl_GetProvidercoreData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvidercoreData'
type MockProvidercoreAcl_GetProvidercoreData_Call struct {
	*mock.Call
}

// GetProvidercoreData is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
//   - preferredLang language.Tag
func (_e *MockProvidercoreAcl_Expecter) GetProvidercoreData(ctx interface{}, identifier interface{}, preferredLang interface{}) *MockProvidercoreAcl_GetProvidercoreData_Call {
	return &MockProvidercoreAcl_GetProvidercoreData_Call{Call: _e.mock.On("GetProvidercoreData", ctx, identifier, preferredLang)}
}

func (_c *MockProvidercoreAcl_GetProvidercoreData_Call) Run(run func(ctx context.Context, identifier string, preferredLang language.Tag)) *MockProvidercoreAcl_GetProvidercoreData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(language.Tag))
	})
	return _c
}

func (_c *MockProvidercoreAcl_GetProvidercoreData_Call) Return(_a0 *provider.ProviderDTO, _a1 error) *MockProvidercoreAcl_GetProvidercoreData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidercoreAcl_GetProvidercoreData_Call) RunAndReturn(run func(context.Context, string, language.Tag) (*provider.ProviderDTO, error)) *MockProvidercoreAcl_GetProvidercoreData_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvidercoreDataWithoutTranslation provides a mock function with given fields: ctx, identifier
func (_m *MockProvidercoreAcl) GetProvidercoreDataWithoutTranslation(ctx context.Context, identifier string) (*provider.ProviderDTO, error) {
	ret := _m.Called(ctx, identifier)

	if len(ret) == 0 {
		panic("no return value specified for GetProvidercoreDataWithoutTranslation")
	}

	var r0 *provider.ProviderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provider.ProviderDTO, error)); ok {
		return rf(ctx, identifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provider.ProviderDTO); ok {
		r0 = rf(ctx, identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.ProviderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvidercoreDataWithoutTranslation'
type MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call struct {
	*mock.Call
}

// GetProvidercoreDataWithoutTranslation is a helper method to define mock.On call
//   - ctx context.Context
//   - identifier string
func (_e *MockProvidercoreAcl_Expecter) GetProvidercoreDataWithoutTranslation(ctx interface{}, identifier interface{}) *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call {
	return &MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call{Call: _e.mock.On("GetProvidercoreDataWithoutTranslation", ctx, identifier)}
}

func (_c *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call) Run(run func(ctx context.Context, identifier string)) *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call) Return(_a0 *provider.ProviderDTO, _a1 error) *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call) RunAndReturn(run func(context.Context, string) (*provider.ProviderDTO, error)) *MockProvidercoreAcl_GetProvidercoreDataWithoutTranslation_Call {
	_c.Call.Return(run)
	return _c
}

// ListProviders provides a mock function with given fields: ctx
func (_m *MockProvidercoreAcl) ListProviders(ctx context.Context) ([]*provider.ProviderDTO, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProviders")
	}

	var r0 []*provider.ProviderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*provider.ProviderDTO, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*provider.ProviderDTO); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*provider.ProviderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvidercoreAcl_ListProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProviders'
type MockProvidercoreAcl_ListProviders_Call struct {
	*mock.Call
}

// ListProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProvidercoreAcl_Expecter) ListProviders(ctx interface{}) *MockProvidercoreAcl_ListProviders_Call {
	return &MockProvidercoreAcl_ListProviders_Call{Call: _e.mock.On("ListProviders", ctx)}
}

func (_c *MockProvidercoreAcl_ListProviders_Call) Run(run func(ctx context.Context)) *MockProvidercoreAcl_ListProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProvidercoreAcl_ListProviders_Call) Return(_a0 []*provider.ProviderDTO, _a1 error) *MockProvidercoreAcl_ListProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvidercoreAcl_ListProviders_Call) RunAndReturn(run func(context.Context) ([]*provider.ProviderDTO, error)) *MockProvidercoreAcl_ListProviders_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvidercoreAcl creates a new instance of MockProvidercoreAcl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvidercoreAcl(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvidercoreAcl {
	mock := &MockProvidercoreAcl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
