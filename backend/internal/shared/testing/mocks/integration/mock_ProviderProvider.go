// Code generated by mockery v2.53.4. DO NOT EDIT.

package integration_mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	provider "github.com/context-space/context-space/backend/internal/shared/contract/providercore"
)

// MockProviderProvider is an autogenerated mock type for the ProviderProvider type
type MockProviderProvider struct {
	mock.Mock
}

type MockProviderProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderProvider) EXPECT() *MockProviderProvider_Expecter {
	return &MockProviderProvider_Expecter{mock: &_m.Mock}
}

// GetProviderByIdentifier provides a mock function with given fields: ctx, providerIdentifier
func (_m *MockProviderProvider) GetProviderByIdentifier(ctx context.Context, providerIdentifier string) (*provider.ProviderDTO, error) {
	ret := _m.Called(ctx, providerIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderByIdentifier")
	}

	var r0 *provider.ProviderDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provider.ProviderDTO, error)); ok {
		return rf(ctx, providerIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provider.ProviderDTO); ok {
		r0 = rf(ctx, providerIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.ProviderDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderProvider_GetProviderByIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderByIdentifier'
type MockProviderProvider_GetProviderByIdentifier_Call struct {
	*mock.Call
}

// GetProviderByIdentifier is a helper method to define mock.On call
//   - ctx context.Context
//   - providerIdentifier string
func (_e *MockProviderProvider_Expecter) GetProviderByIdentifier(ctx interface{}, providerIdentifier interface{}) *MockProviderProvider_GetProviderByIdentifier_Call {
	return &MockProviderProvider_GetProviderByIdentifier_Call{Call: _e.mock.On("GetProviderByIdentifier", ctx, providerIdentifier)}
}

func (_c *MockProviderProvider_GetProviderByIdentifier_Call) Run(run func(ctx context.Context, providerIdentifier string)) *MockProviderProvider_GetProviderByIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderProvider_GetProviderByIdentifier_Call) Return(_a0 *provider.ProviderDTO, _a1 error) *MockProviderProvider_GetProviderByIdentifier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderProvider_GetProviderByIdentifier_Call) RunAndReturn(run func(context.Context, string) (*provider.ProviderDTO, error)) *MockProviderProvider_GetProviderByIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderProvider creates a new instance of MockProviderProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderProvider {
	mock := &MockProviderProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
